{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genres","join","Movie","_ref","description","rating","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","map","movie","src_Movie","description_full","title_english","medium_cover_image","key","id","_renderLoading","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAkCA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC1B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,iBAI7D,SAASC,EAATC,GAA8B,IAARC,EAAQD,EAARC,OAClB,OACIR,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACXL,EAAAC,EAAAC,cAAA,UAAKM,EAAOC,KAAK,OAuBdC,MA5Df,SAAAC,GAA6D,IAA5Cb,EAA4Ca,EAA5Cb,OAAQM,EAAoCO,EAApCP,MAAOI,EAA6BG,EAA7BH,OAAQI,EAAqBD,EAArBC,YAEpC,OAFyDD,EAARE,OAG7Cb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAW,gBACZL,EAAAC,EAAAC,cAAA,UAAKE,IAETJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACVL,EAAAC,EAAAC,cAACI,EAAD,CAAYE,OAAQA,KAEzBR,EAAAC,EAAAC,cAAA,OAAKG,UAAU,sBACXL,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CACIc,KAAMH,EACNI,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,iBCoBrBC,6MAxCbC,MAAQ,KAKRC,cAAgB,WAKd,OAHEC,EAAKF,MAAMG,OAAOC,IAAI,SAAAC,GACpB,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,CAAOf,YAAec,EAAME,iBAAkBf,OAAUa,EAAMb,OAAQL,OAAUkB,EAAMlB,OAAQJ,MAAOsB,EAAMG,cAAe/B,OAAQ4B,EAAMI,mBAAoBC,IAAKL,EAAMM,UAIpLC,eAAiB,WACf,OACEjC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBACbL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,WAAb,kBAIN6B,gCAAa,SAAAC,IAAA,IAAAX,EAAA,OAAAY,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUjB,EAAKkB,WADf,OACLjB,EADKc,EAAAI,KAEXnB,EAAKoB,SAAS,CACZnB,WAHS,wBAAAc,EAAAM,SAAAT,QAMbM,SAAU,WACR,OAAOI,MAAM,6DACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKzB,SACvB0B,MAAM,SAAAC,GAAG,OAAGC,QAAQC,IAAIF,yFA1BzBG,KAAKpB,8CA6BL,OACElC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACZiD,KAAKjC,MAAMG,OAAO8B,KAAKhC,gBAAgBgC,KAAKrB,yBApCnCsB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.a96fc760.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css'\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n \r\nfunction Movie ({poster, title, genres, description, rating}){\r\n\r\n    return(\r\n        <div className=\"Movie__Wrapper\">\r\n            <div className=\"Movie\">\r\n                <div className=\"Movie__Posters\">\r\n                    <MoviePoster poster={poster} alt={title}/>\r\n                </div>\r\n                <div className=\"Movie__Columns\">\r\n                    <div className= \"Movie__title\">\r\n                        <h1>{title}</h1>\r\n                    </div>\r\n                    <div className=\"Movie__genre\">\r\n                        {<MovieGenre genres={genres}/>}\r\n                    </div>\r\n                    <div className=\"Movie__description\">\r\n                        <LinesEllipsis\r\n                            text={description}\r\n                            maxLine='4'\r\n                            ellipsis='...'\r\n                            trimRight\r\n                            basedOn='letters'/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return <img src={poster} alt={alt} title={alt} className=\"Movie__image\"/>\r\n}\r\n\r\n    \r\nfunction MovieGenre ({genres}){\r\n    return (\r\n        <div className=\"Genre__span\">\r\n            <h3>{genres.join(\",\")}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    title:PropTypes.string.isRequired,\r\n    poster:PropTypes.string.isRequired,\r\n    genre:PropTypes.array.isRequired,\r\n    rating:PropTypes.string.isRequired,\r\n    description:PropTypes.string.isRequired\r\n\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster:PropTypes.string.isRequired,\r\n    alt:PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre:PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component }from 'react';\nimport './App.css';\nimport Movie from \"./Movie\";\n\nclass App extends Component{\n\n  state = {}\n\n  componentDidMount(){\n    this._getMovies();\n  }\n  _renderMovies = () => {\n    const movies =  \n      this.state.movies.map(movie => {\n        return <Movie description = {movie.description_full} rating = {movie.rating} genres = {movie.genres} title={movie.title_english} poster={movie.medium_cover_image} key={movie.id}/>\n      })\n    return movies\n  }\n  _renderLoading = () =>{\n    return (\n      <div className=\"loadingStatement\">\n        <p className=\"loading\">Loading...</p>\n      </div>\n    )\n  }\n  _getMovies = async() =>{\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    })\n  }\n  _callApi= () =>{\n    return fetch(\"https://yts.lt/api/v2/list_movies.json/sort_by=like_count\")\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err=> console.log(err))\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        {this.state.movies?this._renderMovies():this._renderLoading()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}